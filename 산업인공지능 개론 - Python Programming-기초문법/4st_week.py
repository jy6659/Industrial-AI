# -*- coding: utf-8 -*-
"""
Created on Thu Mar 25 19:07:49 2021

@author: Jhung
"""



# =============================================================================
# 원의 면적과 둘레 계산
# Tuple은 List와 사용법이 같으나 값을 바꿀수는 없다.
# =============================================================================
# =============================================================================
# import math
#  
# def calCircle(r):
#      area = math.pi * r * r
#      circum = 2 * math.pi * r
#      return (area, circum)
#  
# radius = float(input("원의 반지름을 입력하시오 :"))
# a, c = calCircle(radius)
# print("원의 넓이는 : ", a, ", 원의 둘레는 : ", c)
# =============================================================================

# =============================================================================
# Set은 순서가 없다.
# 순서가 없기에 인덱싱 불가
# add 요소 추가 
# update 여러 요소 추가 
# remove / discard 요소 삭제
# clear 전체 삭제 
# > < subset superset | & 
# =============================================================================
# =============================================================================
# number = {2, 1, 3}
# print(number)
# 
# print(len(number))
# 
# fruits = {"Apple", "Banana", "Pineapple"}
# mySet = {1.0, 2.0, "Hello World", (1, 2, 3)}
# 
# print(fruits)
# print(mySet)
# =============================================================================

# =============================================================================
# 딕셔너리 
# 키와 값의 쌍을 저장할 수 있는 객체
# =============================================================================
# =============================================================================
# contracts = {'Korean':80}
# print(contracts)
# 
# triples = {x:x*x*x for x in range(6)}
# print(triples)
# =============================================================================

# =============================================================================
# 영한 사전
# =============================================================================
# =============================================================================
# english_dict = dict()
# 
# english_dict["one"] = '하나'
# english_dict['two'] = '둘'
# english_dict['three'] = '셋'
# 
# word = input("단어를 입력하시오 : ")
# print(english_dict.get(word, "없음"))
# =============================================================================

# =============================================================================
# 문자열 
# =============================================================================
# =============================================================================
# word = "Python"
# print(word[0:2])
# print(word[2:5])
# =============================================================================

# =============================================================================
# 규칙기반 시스템
# =============================================================================
from durable.lang import *

with ruleset('testRS'):
    # antecedent(조건부) @when_all, @when_any를 사용하여 표기
    @when_all(m.subject == 'World') # m:rule이 적용되는 데이터
    def say_hello(c):
        #consequent(결론부)
        print('Hello {0}'.format(c.m.subject))

post('testRS', {'subject':World})

with ruleset("risk"):
    @when_all c.first << m.t == "purchase", 
    































